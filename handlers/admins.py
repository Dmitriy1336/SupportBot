
from aiogram import F, Router, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from keyboards import Pagination, Set_Level, Pagination_Meeting

import keyboards as kb
import database.requests as rq

from aiogram.fsm.context import FSMContext

import requests
from math import *

from keyboards import Admin_Stats, Update_Level
import datetime

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery, InlineKeyboardButton


router = Router()

class Admin(StatesGroup):
    Set_Admin_Tg = State()
    Set_Admin_Nick = State()
    Set_Admin_Serv = State()
    Set_Admin_Lvl = State()
    Del_Admin = State()
    Ip_dist = State()
    Ip_info = State()
    Set_Meeting = State()

@router.callback_query(F.data == 'admin_panel')
async def panel(callback: CallbackQuery):
    await callback.message.edit_text('<b>üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b>', reply_markup=await kb.admin_act(), parse_mode='HTML')
    await callback.answer()


@router.callback_query(F.data == 'ip_dist')
async def ip_dist(callback: CallbackQuery, state: FSMContext):
    kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    await state.set_state(Admin.Ip_dist)
    await callback.message.edit_text('<b>üîç –í–≤–µ–¥–∏—Ç–µ 2 IP-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n<u>–ü—Ä–∏–º–µ—Ä</u>: 208.80.152.201 91.198.174.192</b>', parse_mode='HTML', reply_markup=kb_back.as_markup())
    await callback.answer()

@router.callback_query(F.data == 'get_ip')
async def get_ip(callback: CallbackQuery, state: FSMContext):
    kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    await state.set_state(Admin.Ip_info)
    await callback.message.edit_text('<b>üîç –í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n<u>–ü—Ä–∏–º–µ—Ä</u>: 208.80.152.201</b>', parse_mode='HTML', reply_markup=kb_back.as_markup())
    await callback.answer()
@router.message(Admin.Ip_info)
async def info_ip(message: Message):
    kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    ip = message.text
    r = requests.get(f"http://ip-api.com/json/{ip}?lang=ru")
    data = r.json()
    country = data['country']
    city = data['city']
    isp = data['isp']
    org = data['org']
    await message.answer(f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IP: {ip}\n\n'
                         f'–°—Ç—Ä–∞–Ω–∞: {country}\n'
                         f'–ì–æ—Ä–æ–¥: {city}\n'
                         f'–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä: {isp}\n'
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {org}</b>', parse_mode='HTML', reply_markup=kb_back.as_markup())

@router.callback_query(F.data == 'set_meeting_info')
async def set_info(callback: CallbackQuery, state: FSMContext):
    chief_admin = await rq.get_admin_lvl(callback.from_user.id)
    if chief_admin >= 5:
        kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        await callback.message.edit_text(f'<b>‚úé –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–æ–±—Ä–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –¥–ª—è —Å–≤–æ–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n\n'
                                         f'üìÅ –ü–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç–µ–∑–∏—Å–Ω–æ (–ø–æ –ø—É–Ω–∫—Ç–∞–º), —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–≥–ª–∞ —á–µ—Ç–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n'
                                         f'‚öôÔ∏è –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–∂–∞—Ç—å —Ç–µ–∫—Å—Ç, –∏–º–µ–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ –¥–æ 2.000 —Å–∏–º–≤–æ–ª–æ–≤.</b>', reply_markup=kb_back.as_markup(),
                                         parse_mode='HTML')
        await state.set_state(Admin.Set_Meeting)
    else:
        await callback.answer(show_alert=True, text='‚ùå –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.\n\n–ó–∞–ø–æ–ª–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–æ–±—Ä–∞–Ω–∏–π –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.')
@router.callback_query(F.data == 'set_admin')
async def set_admin(callback: CallbackQuery, state: FSMContext):
    leads = await rq.get_leads()
    admin_level = await rq.get_admin_lvl(tg_id=callback.from_user.id)
    if admin_level < 5:
        await callback.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
    else:
        kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        await callback.message.edit_text('<b>üÜî –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>', parse_mode='HTML', reply_markup=kb_back.as_markup())
        await state.set_state(Admin.Set_Admin_Tg.state)
        await callback.answer()
@router.callback_query(Set_Level.filter())
async def rq_set_admin_serv(callback: CallbackQuery, callback_data: Set_Level, state: FSMContext):
    chief_admin = await rq.get_admin_lvl(callback.from_user.id)
    if callback_data.level < chief_admin:
        await state.update_data(chosen_lvl=callback_data.level)
        get_server = await rq.get_admin_serv(callback.from_user.id)
        await state.update_data(chosen_serv=get_server)
        admins = await rq.get_admins()
        admins_nick = await rq.get_admins_nick()
        user_data = await state.get_data()
        pos = ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–ö—É—Ä–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ó–∞–º. –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '–û—Å–Ω–æ–≤–Ω–æ–π –ó–∞–º. –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Admin Bot | –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']
        if int(user_data['chosen_tg']) not in admins and (user_data['chosen_nick']) not in admins_nick:
            kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                                             callback_data=Pagination(action='cancel', page=0).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
            await rq.set_admin(user_data['chosen_tg'], user_data['chosen_nick'], user_data['chosen_serv'], user_data['chosen_lvl'], pos[user_data['chosen_lvl']-1])
            await callback.message.edit_text(text=f'<b>üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data["chosen_nick"]} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!</b>', parse_mode='HTML', reply_markup=kb_back.as_markup())
            try:
                file_path = "/root/bots/supportbot/grace.png"
                await callback.message.bot.send_photo(chat_id=user_data["chosen_tg"], photo=types.FSInputFile(file_path), caption=f'<b>ü•≥ {user_data["chosen_nick"]}, –≤—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_data["chosen_lvl"]} —É—Ä–æ–≤–Ω—è –≤ Admin Bot!\n\nüéâ –ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.</b>', parse_mode='HTML')
            except:
               return
            await callback.answer()
        else:
            kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                                             callback_data=Pagination(action='cancel',
                                                                      page=0).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
            await callback.message.edit_text(f'<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ—Å—Ç—Ä–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!\n\nüîí Nick_Name –∏–ª–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç—ã.</b>', parse_mode='HTML', reply_markup=kb_back.as_markup())
            await callback.answer()
        await state.clear()
    else:
        await callback.answer(show_alert=True, text='–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.\n\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø, —Ä–∞–≤–Ω—ã–π –≤–∞—à–µ–º—É –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–≥–æ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')


@router.callback_query(F.data.startswith('get_admins'))
async def category(callback: CallbackQuery):
    await callback.message.edit_text(text=f'<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>:', reply_markup=await kb.paginator(page=0), parse_mode='HTML')
    await callback.answer()


@router.callback_query(Pagination.filter())
async def pagination_handler(call: CallbackQuery, callback_data: Pagination):
    page = callback_data.page  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data
    await call.message.edit_text(f'<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>', reply_markup=await kb.paginator(page=page), parse_mode='HTML')

@router.callback_query(Pagination_Meeting.filter())
async def pagination_handler(call: CallbackQuery, callback_data: Pagination_Meeting):
    page = callback_data.page  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data
    await call.message.edit_text(f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–æ–±—Ä–∞–Ω–∏–π:</b>', reply_markup=await kb.paginator_meeting(server=callback_data.server, page=page), parse_mode='HTML')

@router.callback_query(Admin_Stats.filter())
async def get_actions(callback: CallbackQuery, callback_data: Admin_Stats):
    kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=Pagination(action='cancel', page=0).pack())) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    await callback.message.edit_text(f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', reply_markup=await kb.admin_list_actions(tg_id=callback_data.users_id), parse_mode='HTML')
    await callback.answer()

@router.callback_query(Update_Level.filter())
async def get_actions(callback: CallbackQuery, callback_data: Update_Level):
    chief_admin_lvl = await rq.get_admin_lvl(callback.from_user.id)
    if (chief_admin_lvl >= 5 and callback_data.level != 5) or (chief_admin_lvl == 6):
        if callback_data.users_id == callback.from_user.id:
            await callback.answer(show_alert=True, text='‚õî –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.\n\n‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ —Å–µ–±–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø.')
            await callback.message.edit_text(f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
                                             reply_markup=await kb.admin_list_actions(tg_id=callback_data.users_id),
                                             parse_mode='HTML')
        else:
            pos = ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–ö—É—Ä–∞—Ç–æ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ó–∞–º. –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '–û—Å–Ω–æ–≤–Ω–æ–π –ó–∞–º. –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']

            await rq.update_level(callback_data.users_id, callback_data.level, pos[callback_data.level-1])
            kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=Pagination(action='cancel', page=0).pack())) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
            await callback.message.edit_text(f'<b>–£—Ä–æ–≤–µ–Ω—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.</b>', reply_markup=await kb.admin_list_actions(tg_id=callback_data.users_id), parse_mode='HTML')
            await callback.answer()
    else:
        await callback.answer(show_alert=True, text='‚õî –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç!\n\n‚ö†Ô∏è –í–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        await callback.message.edit_text(f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
                                         reply_markup=await kb.admin_list_actions(tg_id=callback_data.users_id),
                                         parse_mode='HTML')


@router.callback_query(F.data.startswith('adminStatsAct_'))
async def admin_stats(callback: CallbackQuery):
    item_data = callback.data.split('_')
    tg_id = item_data[1]
    kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=Admin_Stats(users_id=tg_id).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    admin_state = await rq.get_admins_state(tg_id)
    await callback.message.edit_text(f'<b>‚≠ê –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nNick_Name: {admin_state.username}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {admin_state.position}\n–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {admin_state.level}\n–°–µ—Ä–≤–µ—Ä: {admin_state.server}\nTelegram ID: {admin_state.tg_id}</b>', reply_markup=kb_back.as_markup(), parse_mode='HTML')  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.callback_query(F.data.startswith('updateLevelAct_'))
async def update_level_act(callback: CallbackQuery):
    item_data = callback.data.split('_')
    tg_id = item_data[1]
    kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                                     callback_data=Admin_Stats(users_id=tg_id).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    await callback.message.edit_text(f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b>', reply_markup=await kb.admin_levels(tg_id), parse_mode='HTML')


@router.callback_query(F.data.startswith('delAdmin_'))
async def del_admin_act(callback: CallbackQuery):
    item_data = callback.data.split('_')
    tg_id = item_data[1]
    chief_admin_lvl = await rq.get_admin_lvl(callback.from_user.id)
    delete_admin_lvl = await rq.get_admin_lvl(tg_id)
    if chief_admin_lvl > delete_admin_lvl:
        chief_admin_serv = await rq.get_admin_serv(callback.from_user.id)
        delete_admin_serv = await rq.get_admin_serv(tg_id)
        if chief_admin_serv == delete_admin_serv or chief_admin_lvl == 6:
            await rq.del_admin(tg_id=tg_id)
            kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                                             callback_data=Admin_Stats(users_id=tg_id).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
            await callback.message.edit_text(f'<b>üìâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω.</b>', reply_markup=await kb.paginator(page=0), parse_mode='HTML')
            await callback.message.bot.send_message(chat_id=tg_id,
                                     text='<b>ü§ñ –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n\nüìâ –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>',
                                     parse_mode='HTML')
        else:
            await callback.answer(show_alert=True, text='‚õî –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.\n\n‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.')

    else:
        await callback.answer(show_alert=True, text=f'‚õî –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.\n\n‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –≤—ã—à–µ –≤–∞—à–µ–≥–æ. –¢–∞–∫–∂–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è.')

@router.callback_query(F.data.startswith('ban_'))
async def category(callback: CallbackQuery):
    item_data = callback.data.split('_', 1)
    user_id = item_data[1]
    blacklist = await rq.get_banned_users()
    current_date = datetime.datetime.now()
    current_date_string = current_date.strftime('%d.%m.%y | %H:%M:%S')
    if int(user_id) not in blacklist:
        await rq.give_ban(int(user_id), '—Å–ø–∞–º', current_date_string)
        await callback.message.answer(f'<b>‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Admin Bot.\n\n‚õî –ü—Ä–∏—á–∏–Ω–∞: —Å–ø–∞–º\n\nüïù –î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {current_date_string}</b>',
                             parse_mode='HTML')
        file_path = "/root/bots/supportbot/ban_img.jpg"
        await callback.message.bot.send_photo(chat_id=user_id, photo=types.FSInputFile(path=file_path), caption=f'<b>‚ö†Ô∏è –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º Admin Bot!\n\n‚õî –ü—Ä–∏—á–∏–Ω–∞: —Å–ø–∞–º\n\nüïù –î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {current_date_string}</b>',  parse_mode='HTML')
        await callback.answer()
    else:
        await callback.message.answer(f'<b>‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Admin Bot.</b>',
                             parse_mode='HTML')
        await callback.answer()


@router.callback_query(F.data == 'get_meetings_info')
async def get_info(callback: CallbackQuery):
    server = await rq.get_admin_serv(callback.from_user.id)
    await callback.message.edit_text(
        f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–æ–±—Ä–∞–Ω–∏–π:</b>',
        reply_markup=await kb.paginator_meeting(server, page=0),
        parse_mode='HTML')

@router.callback_query(F.data.startswith('meeting_'))
async def set_message(callback: CallbackQuery):
    meeting_id = callback.data.split('_')[1]
    meeting = await rq.get_meeting_id(meeting_id)
    chief_admin_lvl = await rq.get_admin_lvl(callback.from_user.id)
    kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='get_meetings_info'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    if chief_admin_lvl >= 5:
        kb_back.row(InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–æ–±—Ä–∞–Ω–∏—è', callback_data=f'delMeeting_{meeting.id}'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    await callback.message.edit_text(
        f'<b>üíÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ {meeting.datetime_meeting} –ø–æ–ª—É—á–µ–Ω–∞.\n\n'
        f'‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {meeting.level} —É—Ä–æ–≤–Ω—è - {meeting.username}.\n\n'
        f'{meeting.description}</b>',
        reply_markup=kb_back.as_markup(),
        parse_mode='HTML')

@router.message(Admin.Set_Admin_Tg)
async def rq_set_admin(message: Message, state: FSMContext):
    if message.text.isdigit() == True:
        kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='set_admin'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        await state.update_data(chosen_tg=message.text)
        await message.answer('<b>üî¥ –í–≤–µ–¥–∏—Ç–µ Nick_Name –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–µ:\n\n<u>–ü—Ä–∏–º–µ—Ä</u>: Jaden_Young</b>', parse_mode='HTML', reply_markup=kb_back.as_markup())
        await state.set_state(Admin.Set_Admin_Nick)
    else:
        kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        await message.answer('<b>üÜî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>', parse_mode='HTML', reply_markup=kb_back.as_markup())
        await state.set_state(Admin.Set_Admin_Tg.state)

@router.message(Admin.Set_Meeting)
async def set_meet(message: Message, state: FSMContext):
    if len(message.text) <= 2000:
        kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        kb_back.row(
            InlineKeyboardButton(text='‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin_panel'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        current_date = datetime.datetime.now()
        current_date_string = current_date.strftime('%d.%m.%y')
        admin = await rq.get_admin(message.from_user.id)
        await rq.set_meetings_info(message.from_user.id, admin.username, admin.server, admin.level, current_date_string, message.text)
        await message.answer(
            f'<b>üì© –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n'
            f'üïú –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - {current_date_string}</b>',
            reply_markup=kb_back.as_markup(),
            parse_mode='HTML')
        await state.clear()
    else:
        kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        await message.answer(
            f'<b>‚úé –í—ã –≤–≤–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 2.000 —Å–∏–º–≤–æ–ª–æ–≤.\n\n'
            f'‚öôÔ∏è –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.</b>',
            reply_markup=kb_back.as_markup(),
            parse_mode='HTML')
        await state.set_state(Admin.Set_Meeting)


@router.message(Admin.Ip_dist)
async def ip_dist(message: Message):
    kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    item_data = message.text.split(' ', 1)
    ip1 = item_data[0]
    ip2 = item_data[1]
    def distance(Lat1, Lat2, Lon1, Lon2):
        Lon1 = radians(Lon1)
        Lon2 = radians(Lon2)
        Lat1 = radians(Lat1)
        Lat2 = radians(Lat2)

        DLon = Lon2 - Lon1  # –º–∞–≥–∏—è —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏–∏
        DLat = Lat2 - Lat1  # –º–∞–≥–∏—è —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏–∏
        P = sin(DLat / 2) ** 2 + cos(Lat1) * cos(Lat2) * sin(DLon / 2) ** 2  # –º–∞–≥–∏—è —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏–∏
        Q = 2 * asin(sqrt(P))  # –º–∞–≥–∏—è —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏–∏
        R = 6371  # —Ä–∞–¥–∏—É—Å –∑–µ–º–ª–∏

        return (Q * R)

    r = requests.get(f"http://ip-api.com/json/{ip1}?lang=ru")
    data = r.json()
    Lat1 = data['lat']
    Lon1 = data['lon']
    country1 = data['country']
    city1 = data['city']
    isp1 = data['isp']
    org1 = data['org']
    r2 = requests.get(f"http://ip-api.com/json/{ip2}?lang=ru")
    data2 = r2.json()
    Lat2 = data2['lat']
    Lon2 = data2['lon']
    country2 = data2['country']
    city2 = data2['city']
    isp2 = data2['isp']
    org2 = data2['org']

    result = round(distance(Lat1, Lat2, Lon1, Lon2))
    await message.answer(f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IP 1: {ip1}\n\n'
                         f'–°—Ç—Ä–∞–Ω–∞: {country1}\n'
                         f'–ì–æ—Ä–æ–¥: {city1}\n'
                         f'–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä: {isp1}\n'
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {org1}\n\n'
                         f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IP 2: {ip2}\n\n'
                         f'–°—Ç—Ä–∞–Ω–∞: {country2}\n'
                         f'–ì–æ—Ä–æ–¥: {city2}\n'
                         f'–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä: {isp2}\n'
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {org2}\n\n'
                         f'<u>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É IP: {result} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤</u></b>', parse_mode='HTML',
                         reply_markup=kb_back.as_markup())  # —Ä–µ–∑—É–ª—å—Ç–∞—Ç

@router.message(Admin.Set_Admin_Nick)
async def rq_set_admin(message: Message, state: FSMContext):
    flag = True
    for i in range(len(message.text)):
        if 65 <= ord(message.text[i]) <= 90 or 97 <= ord(message.text[i]) <= 122 or ord(message.text[i]) == 95:
            continue
        else:
            kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='set_admin'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
            await message.answer('<b>üî¥ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Nick_Name (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π–º–∏ –±—É–∫–≤–∞–º–∏ —Å –Ω–∏–∂–Ω–∏–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º):\n\n<u>–ü—Ä–∏–º–µ—Ä</u>: Jaden_Young</b>', parse_mode='HTML', reply_markup=kb_back.as_markup())
            await state.set_state(Admin.Set_Admin_Nick)
            flag = False
            break
    if flag:
        await state.update_data(chosen_nick=message.text.title())
        await state.set_state(Admin.Set_Admin_Lvl)
        await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b>', parse_mode='HTML', reply_markup=await kb.admin_levels_act())

@router.callback_query(F.data.startswith('delMeeting_'))
async def del_meeting(callback: CallbackQuery):
    item_data = callback.data.split('_')
    meeting_id = item_data[1]
    server = await rq.get_admin_serv(callback.from_user.id)
    chief_admin_lvl = await rq.get_admin_lvl(callback.from_user.id)
    if chief_admin_lvl >= 5:
        await rq.del_meeting(meeting_id)
        kb_back = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        kb_back.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='get_meetings_info')) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        await callback.message.edit_text(f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—Ä–∞–Ω–∏–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.</b>', reply_markup=await kb.paginator_meeting(server, page=0), parse_mode='HTML')
    else:
        await callback.answer(show_alert=True, text='‚õî –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.')


@router.callback_query(F.data == 'info_admin')
async def settings(callback: CallbackQuery):
    await callback.message.edit_text('<b>üñ•  –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö Admin Bot!\n\n'

                                     '‚≠êÔ∏è –î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ–º–æ—â–Ω–∏–∫–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n'

                                     'üß† –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å –¥–æ—Å—Ç—É–ø–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n'
                                     '1Ô∏è‚É£ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n'
                                     '1. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è IP.\n'
                                     '2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º IP.\n'
                                     '3. –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∏–∑–º–µ–Ω–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n'
                                     '4. –£–¥–æ–±–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ 10 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).\n'
                                     '5. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–æ–±—Ä–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.\n'
                                     '6. –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n'
                                     '2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:\n\n'
                                     '1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É —Å–µ—Ä–≤–µ—Ä–∞ (–∞–Ω–∫–µ—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ª–∏–¥–µ—Ä–∞ –∏–ª–∏ –ê–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏).\n'
                                     '2. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞-–∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n'
                                     '3. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –æ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞.\n'
                                     '4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –±–æ—Ç–∞ "–æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏": –ø–µ—Ä–µ–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–µ–∂–¥—É –≤–∞–º–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ —Å Admin Bot!\n\n'
                                     '3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–æ–±—Ä–∞–Ω–∏–π:\n\n'
                                     '1. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–æ–±—Ä–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.\n'
                                     '2. –£–¥–æ–±–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ 10 –∫–Ω–æ–ø–æ–∫).\n\n'

                                     'üöÄ –ü—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ –≤–º–µ—Å—Ç–µ —Å Admin Bot!\n\n'

                                     'üîó –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - @young_keef</b>', parse_mode='HTML',
                                     reply_markup=await kb.back())

    await callback.answer()