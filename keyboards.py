from aiogram.types import InlineKeyboardButton
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.requests import get_categories, get_category_item, select_alladmins, get_meetings_info, get_admins

from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, InlineKeyboardButton
class Pagination(CallbackData, prefix="pag"):
    action: str  # –î–µ–π—Å—Ç–≤–∏–µ
    page: int  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

class Pagination_Meeting(CallbackData, prefix="pag"):
    action: str  # –î–µ–π—Å—Ç–≤–∏–µ
    page: int  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    server: int
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Admin_Stats(CallbackData, prefix='admin_stats'):
    users_id: int  # –ü–æ–ª–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

class Update_Level(CallbackData, prefix='upd_lvl'):
    users_id: int  # –ü–æ–ª–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    level: int
class Set_Level(CallbackData, prefix='set_lvl'):
    level: int
class Set_Admin(CallbackData, prefix = 'set_admin'):
    users_id: int
    level: int

class Get_Meeting(CallbackData, prefix = 'get_meeting'):
    server: int
    datetime_meeting: str
    description: str
    from_adm: str
async def main():
    buttons = [
        [
            types.InlineKeyboardButton(text='üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã', callback_data=f'forms')
        ],
        [types.InlineKeyboardButton(text='‚≠ê –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Admin Bot', callback_data=f'info_user')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

async def main_admins():

    admin_buttons = [
        [types.InlineKeyboardButton(text='üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data=f'admin_panel')],
        [
            types.InlineKeyboardButton(text='üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã', callback_data=f'forms')
        ],
        [
            types.InlineKeyboardButton(text='üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–æ–±—Ä–∞–Ω–∏–π', callback_data=f'get_meetings_info')
        ],
        [types.InlineKeyboardButton(text='‚≠ê –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Admin Bot', callback_data=f'info_admin')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=admin_buttons)
    return keyboard
async def admin_msg(tg_id):
    buttons = [
        [
            types.InlineKeyboardButton(text='üìõ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (—Å–ø–∞–º)', callback_data=f'ban_{tg_id}')
        ],

    ]


    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

async def categories():
    all_categories = await get_categories()
    keyboard = InlineKeyboardBuilder()
    for category in all_categories:
        keyboard.add(InlineKeyboardButton(text=f'üîó {category.name}', callback_data=f'category_{category.id}'))
    keyboard.add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data=f'to_main'))
    return keyboard.adjust(2).as_markup()

async def admin_act():
    admin_buttons = [
        [types.InlineKeyboardButton(text='üåé –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É IP', callback_data=f'ip_dist')],
        [types.InlineKeyboardButton(text='üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–¥–Ω–æ–º IP', callback_data=f'get_ip')],
        [types.InlineKeyboardButton(text='‚ö° –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', callback_data=f'get_admins')],
        [types.InlineKeyboardButton(text='üîä –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–æ–±—Ä–∞–Ω–∏—è', callback_data=f'set_meeting_info')],
        [types.InlineKeyboardButton(text='üü¢ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data=f'set_admin')],
        [
            types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='to_main')
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=admin_buttons)
    return keyboard
async def admin_list_actions(tg_id):
    admin_buttons = [
        [types.InlineKeyboardButton(text='–î–∞–Ω–Ω—ã–µ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ', callback_data=f'adminStatsAct_{tg_id}')],
        [types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞', callback_data=f'updateLevelAct_{tg_id}')],
        [types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data=f'delAdmin_{tg_id}')],
        [
            types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=Pagination(action='cancel', page=0).pack())
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=admin_buttons)
    return keyboard

async def admin_levels(tg_id):
    admin_buttons = [
        [types.InlineKeyboardButton(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', callback_data=Update_Level(users_id = tg_id, level=1).pack())],
        [types.InlineKeyboardButton(text='–ö—É—Ä–∞—Ç–æ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', callback_data= Update_Level(users_id = tg_id, level = 2).pack())],
        [types.InlineKeyboardButton(text='–ó–∞–º. –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data=Update_Level(users_id = tg_id, level=3).pack())],
        [types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω–æ–π –ó–∞–º. –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data=Update_Level(users_id = tg_id, level = 4).pack())],
        [types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                                    callback_data=Update_Level(users_id=tg_id, level=5).pack())],
        [
            types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=Admin_Stats(users_id=tg_id).pack())
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=admin_buttons)
    return keyboard
async def admin_levels_act():
    admin_buttons = [
        [types.InlineKeyboardButton(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', callback_data=Set_Level(level=1).pack())],
        [types.InlineKeyboardButton(text='–ö—É—Ä–∞—Ç–æ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', callback_data=Set_Level(level=2).pack())],
        [types.InlineKeyboardButton(text='–ó–∞–º. –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data=Set_Level(level=3).pack())],
        [types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω–æ–π –ó–∞–º. –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data=Set_Level(level=4).pack())],
        [types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', callback_data=Set_Level(level=5).pack())],
        [types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='set_admin')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=admin_buttons)
    return keyboard

async def back():
    buttons = [
        [
            types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='to_main')
            ]
        ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


# –≤—Å–µ –∞–¥–º–∏–Ω—ã

async def paginator(page: int = 0):
    users = await select_alladmins()

    builder = InlineKeyboardBuilder()
    start_offset = page * 10
    limit = 10
    end_offset = start_offset + limit
    for user in users[start_offset:end_offset]:  # –ü–µ—Ä–µ–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        builder.row(InlineKeyboardButton(text=f'üë§ {user.username} ‚îÉ {user.level} ‚≠ê', callback_data=Admin_Stats(users_id=user.tg_id).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons_row = []  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    if page > 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–µ—Ä–≤–∞—è
        buttons_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=Pagination(action="prev", page=page - 1).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    if end_offset < len(users):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—â—ë –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        buttons_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=Pagination(action="next", page=page + 1).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    builder.row(*buttons_row)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    return builder.as_markup()  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –≤–∏–¥–µ —Ä–∞–∑–º–µ—Ç–∫–∏

async def paginator_meeting(server, page: int = 0):
    all_meetings_info = await get_meetings_info(server)

    builder = InlineKeyboardBuilder()
    start_offset = page * 10
    limit = 10
    end_offset = start_offset + limit
    for meeting in all_meetings_info[start_offset:end_offset]:  # –ü–µ—Ä–µ–±–æ—Ä —Å–æ–±—Ä–∞–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        builder.row(InlineKeyboardButton(text=f'üïú {meeting.datetime_meeting}', callback_data=f'meeting_{meeting.id}'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons_row = []  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    if page > 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–µ—Ä–≤–∞—è
        buttons_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=Pagination_Meeting(action="prev", page=page - 1, server=server).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    if end_offset < len(all_meetings_info):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—â—ë –µ—Å—Ç—å —Å–æ–±—Ä–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        buttons_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=Pagination_Meeting(action="next", page=page + 1, server=server).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    builder.row(*buttons_row)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='to_main'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    return builder.as_markup()  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –≤–∏–¥–µ —Ä–∞–∑–º–µ—Ç–∫–∏